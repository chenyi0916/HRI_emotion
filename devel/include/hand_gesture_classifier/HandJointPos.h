// Generated by gencpp from file hand_gesture_classifier/HandJointPos.msg
// DO NOT EDIT!


#ifndef HAND_GESTURE_CLASSIFIER_MESSAGE_HANDJOINTPOS_H
#define HAND_GESTURE_CLASSIFIER_MESSAGE_HANDJOINTPOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_gesture_classifier
{
template <class ContainerAllocator>
struct HandJointPos_
{
  typedef HandJointPos_<ContainerAllocator> Type;

  HandJointPos_()
    : t(0.0)
    , x()  {
      x.assign(0.0);
  }
  HandJointPos_(const ContainerAllocator& _alloc)
    : t(0.0)
    , x()  {
  (void)_alloc;
      x.assign(0.0);
  }



   typedef double _t_type;
  _t_type t;

   typedef boost::array<double, 75>  _x_type;
  _x_type x;





  typedef boost::shared_ptr< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> const> ConstPtr;

}; // struct HandJointPos_

typedef ::hand_gesture_classifier::HandJointPos_<std::allocator<void> > HandJointPos;

typedef boost::shared_ptr< ::hand_gesture_classifier::HandJointPos > HandJointPosPtr;
typedef boost::shared_ptr< ::hand_gesture_classifier::HandJointPos const> HandJointPosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hand_gesture_classifier::HandJointPos_<ContainerAllocator1> & lhs, const ::hand_gesture_classifier::HandJointPos_<ContainerAllocator2> & rhs)
{
  return lhs.t == rhs.t &&
    lhs.x == rhs.x;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hand_gesture_classifier::HandJointPos_<ContainerAllocator1> & lhs, const ::hand_gesture_classifier::HandJointPos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hand_gesture_classifier

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "646eb86a127f34e71d16f8252e81874b";
  }

  static const char* value(const ::hand_gesture_classifier::HandJointPos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x646eb86a127f34e7ULL;
  static const uint64_t static_value2 = 0x1d16f8252e81874bULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_gesture_classifier/HandJointPos";
  }

  static const char* value(const ::hand_gesture_classifier::HandJointPos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This contains 3D locations of hand joints of length 75 and time .\n"
"float64 t\n"
"float64[75] x\n"
;
  }

  static const char* value(const ::hand_gesture_classifier::HandJointPos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.t);
      stream.next(m.x);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandJointPos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_gesture_classifier::HandJointPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_gesture_classifier::HandJointPos_<ContainerAllocator>& v)
  {
    s << indent << "t: ";
    Printer<double>::stream(s, indent + "  ", v.t);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_GESTURE_CLASSIFIER_MESSAGE_HANDJOINTPOS_H
